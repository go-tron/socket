// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: dispatch.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dispatch_ClientSrv_FullMethodName  = "/Dispatch/ClientSrv"
	Dispatch_MessageSrv_FullMethodName = "/Dispatch/MessageSrv"
)

// DispatchClient is the client API for Dispatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatchClient interface {
	ClientSrv(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error)
	MessageSrv(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error)
}

type dispatchClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatchClient(cc grpc.ClientConnInterface) DispatchClient {
	return &dispatchClient{cc}
}

func (c *dispatchClient) ClientSrv(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, Dispatch_ClientSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatchClient) MessageSrv(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, Dispatch_MessageSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatchServer is the server API for Dispatch service.
// All implementations must embed UnimplementedDispatchServer
// for forward compatibility
type DispatchServer interface {
	ClientSrv(context.Context, *Client) (*Result, error)
	MessageSrv(context.Context, *Message) (*Result, error)
	mustEmbedUnimplementedDispatchServer()
}

// UnimplementedDispatchServer must be embedded to have forward compatible implementations.
type UnimplementedDispatchServer struct {
}

func (UnimplementedDispatchServer) ClientSrv(context.Context, *Client) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSrv not implemented")
}
func (UnimplementedDispatchServer) MessageSrv(context.Context, *Message) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSrv not implemented")
}
func (UnimplementedDispatchServer) mustEmbedUnimplementedDispatchServer() {}

// UnsafeDispatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatchServer will
// result in compilation errors.
type UnsafeDispatchServer interface {
	mustEmbedUnimplementedDispatchServer()
}

func RegisterDispatchServer(s grpc.ServiceRegistrar, srv DispatchServer) {
	s.RegisterService(&Dispatch_ServiceDesc, srv)
}

func _Dispatch_ClientSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchServer).ClientSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispatch_ClientSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchServer).ClientSrv(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatch_MessageSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchServer).MessageSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispatch_MessageSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchServer).MessageSrv(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Dispatch_ServiceDesc is the grpc.ServiceDesc for Dispatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dispatch",
	HandlerType: (*DispatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientSrv",
			Handler:    _Dispatch_ClientSrv_Handler,
		},
		{
			MethodName: "MessageSrv",
			Handler:    _Dispatch_MessageSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatch.proto",
}
